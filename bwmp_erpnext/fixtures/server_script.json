[
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Validate",
  "event_frequency": "All",
  "modified": "2022-02-07 15:27:56.013031",
  "module": null,
  "name": "Purchase Invoice Service Items",
  "reference_doctype": "Purchase Invoice",
  "script": "doc.has_service_items = not (frappe.db.get_value('Item', doc.items[0].item_code, 'is_stock_item'))",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2022-01-26 17:49:19.991717",
  "module": null,
  "name": "Purchase Receipt Update Batch",
  "reference_doctype": "Purchase Receipt",
  "script": "for row in doc.items:\n    if row.batch_no:\n        frappe.db.set_value('Batch', row.batch_no, {\n            'length': row.length,\n            'width': row.width,\n            'thickness': row.thickness,\n            'weight': row.weight\n        })",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2022-01-26 17:51:20.878027",
  "module": null,
  "name": "Purchase Invoice Batch Update",
  "reference_doctype": "Purchase Invoice",
  "script": "for row in doc.items:\n    if row.batch_no:\n        frappe.db.set_value('Batch', row.batch_no, {\n            'length': row.length,\n            'width': row.width,\n            'thickness': row.thickness,\n            'weight': row.weight\n        })",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2022-01-26 20:09:19.780413",
  "module": null,
  "name": "Stock Entry Batch Update",
  "reference_doctype": "Stock Entry",
  "script": "fields = ['length','width','thickness','weight']\n\nfor row in doc.items:\n    if not row.s_warehouse and row.t_warehouse and row.batch_no:\n        update_value = {}\n        for field in fields:\n            if row.get(field):\n                update_value[field] = row.get(field)\n\n        if update_value:\n            frappe.db.set_value('Batch', row.batch_no, {\n                'length': row.length,\n                'width': row.width,\n                'thickness': row.thickness,\n                'weight': row.weight\n            })",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2022-01-26 18:06:29.329962",
  "module": null,
  "name": "Stock Entry Get Batch Data",
  "reference_doctype": "Stock Entry",
  "script": "fields = ['length','width','thickness','weight']\n\nfor row in doc.items:\n    if row.s_warehouse and not row.t_warehouse and row.batch_no:\n        batch_data = frappe.db.get_value('Batch', row.batch_no, fields, as_dict=1)\n        \n        for field in fields:\n            row.set(field, batch_data.get(field))",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Validate",
  "event_frequency": "All",
  "modified": "2022-01-27 19:05:17.996454",
  "module": null,
  "name": "Stock Entry Make Batch for Repack",
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == 'Item Batch Splitting' and doc.get('_action') == 'submit':\n    def make_batch(item, batch_no, docname):\n        frappe.get_doc({\n            'doctype': 'Batch',\n            'reference_doctype': 'Stock Entry',\n            'reference_name': docname,\n            'batch_id': batch_no,\n            'item': item\n        }).insert(ignore_permissions=True)\n    \n    \n    rm_batch_no = {}\n    for row in doc.items:\n        if row.s_warehouse and not row.t_warehouse and row.batch_no:\n            old_batch_no = row.batch_no.split('/')[0]\n            \n            character = frappe.db.get_value('Batch', old_batch_no, 'current_char')\n            rm_batch_no[row.item_code] = [row.batch_no, row.qty, 0, character, row]\n\n    for row in doc.items:\n        if not row.s_warehouse and row.t_warehouse and rm_batch_no.get(row.item_code):\n            batch_data = rm_batch_no[row.item_code]\n            current_ch = ''\n            current_no = 0\n            \n            old_batch_no = batch_data[0].split('/')[0]\n            if row.is_balance_batch:\n                current_ch = 'A'\n                if batch_data[3]:\n                    current_ch = chr(ord(batch_data[3]) + 1)\n\n                batch_no = old_batch_no + '/' + current_ch\n            else:\n                last_char = batch_data[0].rsplit('/')[-1]\n                if str(last_char).isalpha():\n                    old_batch_no = batch_data[0]\n\n                current_no = frappe.utils.cint(batch_data[2]) + 1\n                batch_no = old_batch_no + '/' + str(current_no)\n            \n            make_batch(row.item_code, batch_no, doc.name)\n            row.batch_no = batch_no\n\n            new_qty = frappe.utils.flt(batch_data[1]) - frappe.utils.flt(row.qty)\n            rm_batch_no[row.item_code] = [batch_data[0], new_qty, \n                current_no or batch_data[2], current_ch or batch_data[3], row]\n\n\n    for item in rm_batch_no:\n        data = rm_batch_no.get(item)\n\n        if data[1] > 0:\n            msg = 'The item ' + frappe.bold(item)  + ' has balance quantity ' + frappe.format_value(data[1]) + ' in the batch ' + frappe.bold(data[0])\n            frappe.throw(msg, title='Input Qty and Total Output Qty Should be Same')\n            \n\n    for n_item in doc.items:\n        if n_item.batch_no and n_item.t_warehouse and n_item.is_balance_batch:\n            batch_parts = n_item.batch_no.rsplit('/')\n            \n            character = batch_parts[-1]\n            batch_no = batch_parts[0]\n            frappe.db.set_value('Batch', batch_no, 'current_char', character)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2022-01-27 19:02:03.895845",
  "module": null,
  "name": "Stock Entry Validation for Batch Splitting",
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == 'Item Batch Splitting':\n    input_items = []\n    output_items = []\n    for row in doc.items:\n        if row.s_warehouse and not row.t_warehouse:\n            if input_items:\n                frappe.throw('More than one input items are not allowed')\n            input_items.append(row.item_code)\n        elif not row.s_warehouse and row.t_warehouse:\n            if input_items and row.item_code not in input_items:\n                frappe.throw('Input item and output item should be same as ' + frappe.bold(input_items[0]))\n            output_items.append(row.item_code)\n\n    if not input_items:\n        frappe.throw('Should have atleast one input item')\n        \n    if not output_items:\n        frappe.throw('Should have atleast one output item')\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2022-02-03 15:54:42.955642",
  "module": null,
  "name": "Create ToDo on submit",
  "reference_doctype": "Quotation",
  "script": "if doc.quotation_to == \"Customer\":\n    customer = frappe.get_doc(\"Customer\", doc.customer)\n    if customer.account_manager:\n        frappe.get_doc({\n            \"doctype\": \"ToDo\",\n            \"reference_type\": doc.doctype,\n            \"reference_name\": doc.name,\n            \"allocated_to\": customer.account_manager,\n            \"date\": frappe.utils.add_to_date(None ,days=1),\n            \"assigned_by\": doc.modified_by,\n            \"description\": \"Speak with the customer : \" + doc.party_name\n        }).insert()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save (Submitted Document)",
  "event_frequency": "All",
  "modified": "2022-02-15 12:46:59.027277",
  "module": null,
  "name": "Update Followup and create Todo",
  "reference_doctype": "Quotation",
  "script": "def get_contact_display(contact):\n\tcontact_info = frappe.db.get_value(\n\t\t\"Contact\", contact,\n\t\t[\"first_name\", \"last_name\", \"phone\", \"mobile_no\"],\n\t\tas_dict=1)\n\n\tcontact_info.html = f\"\"\" { contact_info.first_name or ''} <b>{ contact_info.last_name or ''}</b> <br> { contact_info.phone or '' } <br> { contact_info.mobile_no or ''}\"\"\"\n\n\treturn contact_info.html\n\nif doc.quotation_to == \"Customer\":\n    if doc.contact:\n        doc.contact_html = get_contact_display(doc.contact)\n\n    followup_detail = {}\n    if doc.is_new():\n        if doc.next_contact_date:\n            followup_detail['date'] = doc.next_contact_date\n        if doc.next_contact_by:\n            followup_detail['followup_by'] = doc.next_contact_by\n        if doc.discussion:\n            followup_detail['discussion'] = doc.discussion\n            doc.add_comment('Comment', text=doc.discussion)\n        \n        if doc.communication_type:\n            followup_detail['communication_type'] = doc.communication_type\n    \n    else:\n        prev_value = frappe.db.get_value(doc.doctype, doc.name, ['next_contact_date_', 'discussion'], as_dict=1)\n        if doc.next_contact_date_ and doc.next_contact_date_ != prev_value['next_contact_date_']:\n            followup_detail['date_'] = doc.next_contact_date_\n            followup_detail['followup_by'] = doc.next_contact_by\n            followup_detail['discussion'] = doc.discussion\n            followup_detail['communication_type'] = doc.communication_type\n\n        if prev_value['discussion'] != doc.discussion:\n            doc.add_comment('Comment', text=doc.discussion)\n    \n    if followup_detail:\n        doc.append('followup_details', followup_detail)\n        am = frappe.db.get_value(\"Customer\", doc.party_name, 'account_manager')\n        todos = frappe.get_all(\"ToDo\", {\"reference_type\": doc.doctype, \"reference_name\": doc.name, \"status\": \"Open\"}, pluck=\"name\")\n        for todo in todos:\n            frappe.db.set_value(\"ToDo\", todo, \"status\", \"Closed\", update_modified=False)\n        if am:\n            todo = frappe.get_doc({\n                \"doctype\": \"ToDo\",\n                \"reference_type\": doc.doctype,\n                \"reference_name\": doc.name,\n                \"allocated_to\": am,\n                \"date\": frappe.utils.getdate(followup_detail['date_']),\n                \"start_time\": followup_detail['date_'],\n                \"end_time\": frappe.utils.add_to_date(followup_detail['date_'], minutes=30),\n                \"assigned_by\": doc.modified_by,\n                \"description\": doc.discussion or \"Speak with the customer : \" + doc.party_name\n            })\n            todo.insert()\n        ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2022-02-09 17:48:43.309902",
  "module": null,
  "name": "Validate Credit Period",
  "reference_doctype": "Sales Invoice",
  "script": "bypass_so = 0\n\nif doc.customer:\n    \n    cust_credit = frappe.db.get_all(\"Customer Credit Limit\",\n                    {'parent': doc.customer, 'parenttype': 'Customer', 'company': doc.company}, \n                    ['credit_limit_days','bypass_credit_limit_check'])\n    \n    if cust_credit:\n    \n        credit_limit_days = cust_credit[0].credit_limit_days\n    \n        bypass_so = cust_credit[0].bypass_credit_limit_check\n    \n    else:\n    \n        customer_group = frappe.db.get_value(\"Customer\", doc.customer, 'customer_group')\n    \n        cust_credit = frappe.db.get_all(\"Customer Credit Limit\",\n                {'parent': customer_group, 'parenttype': 'Customer Group', 'company': doc.company}, \n                ['credit_limit_days','bypass_credit_limit_check'])\n    \n        if cust_credit:\n    \n            credit_limit_days = cust_credit[0].credit_limit_days\n    \n            bypass_so = cust_credit[0].bypass_credit_limit_check\n            \n    if credit_limit_days:\n    \n#        credit_due_date = frappe.utils.add_days(frappe.utils.nowdate() , -credit_limit_days)\n        \n        outstanding_based_on_si = frappe.get_all(\"Sales Invoice\",fields=[\"name\",\"outstanding_amount\",\"currency\",\"posting_date\"] ,\n                    filters = {\"customer\":doc.customer,\"docstatus\":1,\"company\":doc.company,\n                    \"outstanding_amount\" :['>', '0']})\n    \n        for os in outstanding_based_on_si:\n            if frappe.utils.date_diff( frappe.utils.nowdate(),os.posting_date) > credit_limit_days:\n                frappe.throw(\"Credit Period of \"+ str(credit_limit_days) +\" days, has crossed for customer \"+ doc.customer +\", for an outstanding amount of \"+ os.currency +\" \"+str(os.outstanding_amount) )\n                            \n        \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2022-02-11 16:21:29.932411",
  "module": null,
  "name": "Validate Credit Period in SO",
  "reference_doctype": "Sales Order",
  "script": "bypass_so = 0\n\nif doc.customer:\n    \n    cust_credit = frappe.db.get_all(\"Customer Credit Limit\",\n                    {'parent': doc.customer, 'parenttype': 'Customer', 'company': doc.company}, \n                    ['credit_limit_days','bypass_credit_limit_check'])\n    \n    if cust_credit:\n    \n        credit_limit_days = cust_credit[0].credit_limit_days\n    \n        bypass_so = cust_credit[0].bypass_credit_limit_check\n    \n    else:\n    \n        customer_group = frappe.db.get_value(\"Customer\", doc.customer, 'customer_group')\n    \n        cust_credit = frappe.db.get_all(\"Customer Credit Limit\",\n                {'parent': customer_group, 'parenttype': 'Customer Group', 'company': doc.company}, \n                ['credit_limit_days','bypass_credit_limit_check'])\n    \n        if cust_credit:\n    \n            credit_limit_days = cust_credit[0].credit_limit_days\n    \n            bypass_so = cust_credit[0].bypass_credit_limit_check\n            \n    if credit_limit_days and not bypass_so:\n    \n        outstanding_based_on_si = frappe.get_all(\"Sales Invoice\",fields=[\"name\",\"outstanding_amount\",\"currency\",\"posting_date\"] ,\n                    filters = {\"customer\":doc.customer,\"docstatus\":1,\"company\":doc.company,\n                    \"outstanding_amount\" :['>', '0']})\n    \n        for os in outstanding_based_on_si:\n            if frappe.utils.date_diff( frappe.utils.nowdate(),os.posting_date) > credit_limit_days:\n                frappe.throw(\"Credit Period of \"+ str(credit_limit_days) +\" days, has crossed for customer \"+ doc.customer +\", for an outstanding amount of \"+ os.currency +\" \"+str(os.outstanding_amount) )\n                            \n        \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2022-02-11 16:23:29.473943",
  "module": null,
  "name": "Validate Credit Period in DN",
  "reference_doctype": "Delivery Note",
  "script": "bypass_so = 0\n\nif doc.customer:\n    \n    cust_credit = frappe.db.get_all(\"Customer Credit Limit\",\n                    {'parent': doc.customer, 'parenttype': 'Customer', 'company': doc.company}, \n                    ['credit_limit_days','bypass_credit_limit_check'])\n    \n    if cust_credit:\n    \n        credit_limit_days = cust_credit[0].credit_limit_days\n    \n        bypass_so = cust_credit[0].bypass_credit_limit_check\n    \n    else:\n    \n        customer_group = frappe.db.get_value(\"Customer\", doc.customer, 'customer_group')\n    \n        cust_credit = frappe.db.get_all(\"Customer Credit Limit\",\n                {'parent': customer_group, 'parenttype': 'Customer Group', 'company': doc.company}, \n                ['credit_limit_days','bypass_credit_limit_check'])\n    \n        if cust_credit:\n    \n            credit_limit_days = cust_credit[0].credit_limit_days\n    \n            bypass_so = cust_credit[0].bypass_credit_limit_check\n            \n    if credit_limit_days:\n    \n        outstanding_based_on_si = frappe.get_all(\"Sales Invoice\",fields=[\"name\",\"outstanding_amount\",\"currency\",\"posting_date\"] ,\n                    filters = {\"customer\":doc.customer,\"docstatus\":1,\"company\":doc.company,\n                    \"outstanding_amount\" :['>', '0']})\n    \n        for os in outstanding_based_on_si:\n            if frappe.utils.date_diff( frappe.utils.nowdate(),os.posting_date) > credit_limit_days:\n                frappe.throw(\"Credit Period of \"+ str(credit_limit_days) +\" days, has crossed for customer \"+ doc.customer +\", for an outstanding amount of \"+ os.currency +\" \"+str(os.outstanding_amount) )\n                            \n        \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Validate",
  "event_frequency": "All",
  "modified": "2022-02-15 12:20:34.692911",
  "module": null,
  "name": "Update Next Contact By",
  "reference_doctype": "Quotation",
  "script": "if doc.quotation_to == \"Customer\":\n    am = frappe.db.get_value(\"Customer\", doc.party_name, 'account_manager')\n    if not doc.next_contact_by:\n        doc.next_contact_by = am",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Validate",
  "event_frequency": "All",
  "modified": "2022-03-29 20:24:47.547517",
  "module": null,
  "name": "Default Credit Limit Update",
  "reference_doctype": "Customer",
  "script": "companies = []\nfor row in doc.credit_limits:\n\tcompanies.append(row.company)\n\tif not row.credit_limit:\n\t\trow.credit_limit = 1\n\n\tif not row.credit_limit_days:\n\t\trow.credit_limit_days = 1\n\nif companies:\n\tfor company in frappe.get_all(\"Company\", filters = {\"name\": [\"not in\", companies]}):\n\t\tdoc.append(\"credit_limits\", {\n\t\t\t\"company\": company.name,\n\t\t\t\"credit_limit\": 1.0,\n\t\t\t\"credit_limit_days\": 1.0\n\t\t})",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Validate",
  "event_frequency": "All",
  "modified": "2022-03-29 20:07:36.161787",
  "module": null,
  "name": "Customer Name in TODO",
  "reference_doctype": "ToDo",
  "script": "if doc.reference_type in ['Quotation', 'Sales Order', 'Sales Invoice', 'Delivery Note']:\n\tif doc.reference_type == 'Quotation':\n\t\tdata = frappe.db.get_value('Quotation', doc.reference_name, ['quotation_to', 'party_name', 'customer_name'], as_dict=1)\n\t\tif data.quotation_to == 'Customer':\n\t\t\tdoc.customer = data.party_name\n\t\t\tdoc.customer_name = data.customer_name\n\telse:\n\t\tdata = frappe.db.get_value(doc.reference_type, doc.reference_name, ['customer', 'customer_name'], as_dict=1)\n\t\tdoc.customer = data.customer\n\t\tdoc.customer_name = data.customer_name",
  "script_type": "DocType Event"
 }
]